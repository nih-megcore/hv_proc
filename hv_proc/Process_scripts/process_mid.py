#!/usr/bin/env python3
# -*- coding: utf-8 -*-


'''
This code was generated by the nih2mne package: 
https://github.com/nih-megcore/nih_to_mne.git  
'''


import sys
import mne
import nih2mne
from nih2mne.utilities.trigger_utilities import (parse_marks, detect_digital,
                    check_analog_inverted, threshold_detect, append_conditions, 
                    correct_to_projector, add_event_offset, check_analog_inverted)
from nih2mne.utilities.markerfile_write import main as write_markerfile


meg_fname = sys.argv[1]  #meg_fname = "/fast2/20250205_hv2set/JACTZJMA_MID_20250205_008.ds"

dframe_list=[]

##### Analog Trigger Coding ######

tmp_dframe = threshold_detect(dsname=meg_fname, channel='UADC006', mark='response', invert=False)

dframe_list.append(tmp_dframe)

invert_val = check_analog_inverted(fname=meg_fname, ch_name='UADC016')

tmp_dframe = threshold_detect(dsname=meg_fname, channel='UADC016', mark='projector', invert=invert_val)

dframe_list.append(tmp_dframe)

tmp_dframe = threshold_detect(dsname=meg_fname, channel='UADC016', mark='projectorD', invert=(not invert_val))

dframe_list.append(tmp_dframe)

##### Digital Trigger Coding ######

dig_dframe = detect_digital(filename=meg_fname, channel='UPPT001')

dig_dframe.loc[dig_dframe.condition=='8', 'condition']='cue_loss'

dig_dframe.loc[dig_dframe.condition=='16', 'condition']='cue_neutral'

dig_dframe.loc[dig_dframe.condition=='32', 'condition']='cue_win'

dig_dframe.loc[dig_dframe.condition=='100', 'condition']='target'

dframe_list.append(dig_dframe)

##### Projector Correction and Event Offset ######

dframe = append_conditions(dframe_list)

dframe = correct_to_projector(dframe, event_list=['cue_loss', 'cue_neutral', 'cue_win', 'target'], window=[-0.2,0.2])

##### Parse Marks Coding ######
## Code Targets (intermediary step)
# fixation --> 2.4-2.5s (jittered)
fix_max = 4.5 #2.6
dframe = parse_marks(dframe=dframe, lead_condition='cue_neutral', 
                     lag_condition='target', window=[0.0, fix_max],  
                     marker_on='lag', marker_name='target_neutral',
                     append_result=True)
dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='cue_win', 
                     lag_condition='target', window=[0.0, fix_max],  
                     marker_on='lag', marker_name='target_win', 
                     append_result=True)
dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='cue_loss', 
                     lag_condition='target', window=[0.0, fix_max],  
                     marker_on='lag', marker_name='target_loss', 
                     append_result=True)
dframe.dropna(inplace=True)
# dframe.query('condition in ["target_loss", "target_neutral", "target_win"]')

## Code Reponse Window
dframe = parse_marks(dframe=dframe, lead_condition='target_neutral', 
                     lag_condition='projectorD', window=[0.0, 2.0],  
                     marker_on='lag', marker_name='resp_end_neutral', 
                     append_result=True)
dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='target_win', 
                     lag_condition='projectorD', window=[0.0, 2.0],  
                     marker_on='lag', marker_name='resp_end_win', 
                     append_result=True)
dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='target_loss', 
                     lag_condition='projectorD', window=[0.0, 2.0],  
                     marker_on='lag', marker_name='resp_end_loss', 
                     append_result=True)
dframe.dropna(inplace=True)
#dframe.query('condition in ["resp_end_neutral", "resp_end_win","resp_end_loss"]')

## Code win/loss responses
dframe = parse_marks(dframe=dframe, lead_condition='response', 
                     lag_condition='resp_end_neutral', window=[0.0, 2.0],  
                     marker_on='lead', marker_name='response_neutral', 
                     append_result=True)
dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='response', 
                     lag_condition='resp_end_win', window=[0.0, 2.0],  
                     marker_on='lead', marker_name='response_win', 
                     append_result=True)
dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='response', 
                     lag_condition='resp_end_loss', window=[0.0, 2.0],  
                     marker_on='lead', marker_name='response_loss', 
                     append_result=True)
dframe.dropna(inplace=True)

# Code out response loss miss <<< ---- lose money
# always +/-  $1




### Code out missed responses
# dframe = parse_marks(dframe=dframe, lead_condition='response', 
#                      lag_condition='resp_end_neutral', null_window=[0.0, 2.0],  
#                      marker_on='lead', marker_name='miss_neutral', 
#                      append_result=True)
# dframe.dropna(inplace=True)

# dframe = parse_marks(dframe=dframe, lead_condition='response', 
#                      lag_condition='resp_end_win', null_window=[0.0, 2.0],  
#                      marker_on='lead', marker_name='miss_win', 
#                      append_result=True)
# dframe.dropna(inplace=True)

# dframe = parse_marks(dframe=dframe, lead_condition='response', 
#                      lag_condition='resp_end_loss', null_window=[0.0, 2.0],  
#                      marker_on='lead', marker_name='miss_loss', 
#                      append_result=True)
# dframe.dropna(inplace=True)




##### Set Events to Keep ######
final_dframe_list = []
for evt_name in ['cue_win', 'neutral_response', 'win_response', 'cue_loss', 'target_neutral', 
                 'loss_reponse', 'cue_neutral', 'target_loss', 'target_win',
                 'response_neutral', 'response_loss','response_win']:
    keep_dframe=dframe[dframe.condition==evt_name]
    final_dframe_list.append(keep_dframe)
final_dframe = append_conditions(final_dframe_list)


write_markerfile(dframe=final_dframe, ds_filename=meg_fname)

print('\n')
print(final_dframe.condition.value_counts())


#%%
#raw = mne.io.read_raw_ctf(meg_fname, preload=True, system_clock='ignore')
#raw.pick_types(misc=True)
#raw.plot(use_opengl=True)
