#!/usr/bin/env python3
# -*- coding: utf-8 -*-


'''
This code was generated by the nih2mne package: 
https://github.com/nih-megcore/nih_to_mne.git  
'''


import sys
import mne
import nih2mne
from nih2mne.utilities.trigger_utilities import (parse_marks, detect_digital,
                    check_analog_inverted, threshold_detect, append_conditions, correct_to_projector, add_event_offset)
from nih2mne.utilities.markerfile_write import main as write_markerfile


meg_fname = sys.argv[1]

dframe_list=[]

##### Analog Trigger Coding ######

tmp_dframe = threshold_detect(dsname=meg_fname, channel='UADC006', mark='left_response', invert=False)

dframe_list.append(tmp_dframe)

tmp_dframe = threshold_detect(dsname=meg_fname, channel='UADC007', mark='right_response', invert=False)

dframe_list.append(tmp_dframe)

invert_val = check_analog_inverted(fname=meg_fname, ch_name='UADC016')

tmp_dframe = threshold_detect(dsname=meg_fname, channel='UADC016', mark='projector', invert=invert_val)

dframe_list.append(tmp_dframe)

##### Digital Trigger Coding ######

dig_dframe = detect_digital(filename=meg_fname, channel='UPPT001')

dig_dframe.loc[dig_dframe.condition=='2', 'condition']='fixation'

dig_dframe.loc[dig_dframe.condition=='4', 'condition']='right_congruent'

dig_dframe.loc[dig_dframe.condition=='8', 'condition']='right_incongruent'

dig_dframe.loc[dig_dframe.condition=='16', 'condition']='left_congruent'

dig_dframe.loc[dig_dframe.condition=='32', 'condition']='left_incongruent'

dframe_list.append(dig_dframe)

##### Projector Correction and Event Offset ######

dframe = append_conditions(dframe_list)

dframe = correct_to_projector(dframe, event_list=['fixation', 'right_congruent', 'right_incongruent', 'left_congruent', 'left_incongruent'], window=[-0.2,0.2])

##### Parse Marks Coding ######

dframe = parse_marks(dframe=dframe, lead_condition='right_congruent', lag_condition='right_response', window=[0.0, 1.0],  marker_on='lag', marker_name='correct_response', append_result=True)

dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='right_incongruent', lag_condition='right_response', window=[0.0, 1.0],  marker_on='lag', marker_name='correct_response', append_result=True)

dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='left_congruent', lag_condition='left_response', window=[0.0, 1.0],  marker_on='lag', marker_name='correct_response', append_result=True)

dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='left_incongruent', lag_condition='left_response', window=[0.0, 1.0],  marker_on='lag', marker_name='correct_response', append_result=True)

dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='right_congruent', lag_condition='left_response', window=[0.0, 1.0],  marker_on='lag', marker_name='incorrect_response', append_result=True)

dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='right_incongruent', lag_condition='left_response', window=[0.0, 1.0],  marker_on='lag', marker_name='incorrect_response', append_result=True)

dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='left_congruent', lag_condition='right_response', window=[0.0, 1.0],  marker_on='lag', marker_name='incorrect_response', append_result=True)

dframe.dropna(inplace=True)

dframe = parse_marks(dframe=dframe, lead_condition='left_incongruent', lag_condition='right_response', window=[0.0, 1.0],  marker_on='lag', marker_name='incorrect_response', append_result=True)

dframe.dropna(inplace=True)


##### Set Events to Keep ######
final_dframe_list = []
for evt_name in ['left_incongruent', 'correct_response', 'right_response', 'right_incongruent', 'left_congruent', 'right_congruent', 'incorrect_response', 'left_response', 'fixation']:
    keep_dframe=dframe[dframe.condition==evt_name]
    final_dframe_list.append(keep_dframe)
final_dframe = append_conditions(final_dframe_list)


write_markerfile(dframe=final_dframe, ds_filename=meg_fname)

print('\n')
print(final_dframe.condition.value_counts())
